{"ast":null,"code":"var _jsxFileName = \"/home/techmanager/Documents/tkiener-blablapp-react/product/front/src/InConversation.jsx\";\nimport React from 'react';\nimport Logout from './Logout';\nimport MessagesDisplay from './MessagesDisplay';\nimport UserContext from './UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass InConversation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getConversation = () => {\n      fetch('http://localhost:5000/conversation/' + this.props.match.params.id).then(response => {\n        return response.text();\n      }).then(data => {\n        const messages = JSON.parse(data);\n        console.log(messages);\n\n        if (messages.includes(\"user not in this\")) {\n          alert(\"You are not part of this conversation\");\n        } else {\n          this.setState({\n            messages: messages[0],\n            username: messages[1]\n          });\n        }\n      });\n    };\n\n    this.state = {\n      messages: [],\n      username: ''\n    };\n    this.handleRegister = this.handleRegister.bind(this);\n  }\n\n  componentDidMount() {\n    this.getConversation();\n  }\n\n  handleRegister(ev) {}\n\n  // Rendu React du composant  \n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/conversation-list\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/logo2.png\",\n          width: \"100px\",\n          alt: \"logo-provisoire\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), this.state.messages.map((message, i) => {\n        return /*#__PURE__*/_jsxDEV(MessagesDisplay, {\n          username: this.state.username,\n          id: i,\n          author: message[0],\n          content: message[1],\n          sent: message[2]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 23\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(Logout, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default InConversation;","map":{"version":3,"sources":["/home/techmanager/Documents/tkiener-blablapp-react/product/front/src/InConversation.jsx"],"names":["React","Logout","MessagesDisplay","UserContext","InConversation","Component","constructor","props","getConversation","fetch","match","params","id","then","response","text","data","messages","JSON","parse","console","log","includes","alert","setState","username","state","handleRegister","bind","componentDidMount","ev","render","map","message","i"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;;AAGA,MAAMC,cAAN,SAA6BJ,KAAK,CAACK,SAAnC,CAA6C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAenBC,eAfmB,GAeD,MAAM;AACpBC,MAAAA,KAAK,CAAC,wCAAwC,KAAKF,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBC,EAAjE,CAAL,CACCC,IADD,CACMC,QAAQ,IAAI;AAChB,eAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,OAHD,EAICF,IAJD,CAIMG,IAAI,IAAI;AACZ,cAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAjB;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;;AACA,YAAIA,QAAQ,CAACK,QAAT,CAAkB,kBAAlB,CAAJ,EAA2C;AACvCC,UAAAA,KAAK,CAAC,uCAAD,CAAL;AACH,SAFD,MAGK;AACH,eAAKC,QAAL,CAAc;AAACP,YAAAA,QAAQ,EAAEA,QAAQ,CAAC,CAAD,CAAnB;AACCQ,YAAAA,QAAQ,EAAER,QAAQ,CAAC,CAAD;AADnB,WAAd;AAED;AACF,OAdD;AAeC,KA/Bc;;AAEjB,SAAKS,KAAL,GAAc;AAAET,MAAAA,QAAQ,EAAE,EAAZ;AACCQ,MAAAA,QAAQ,EAAE;AADX,KAAd;AAIA,SAAKE,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;AACD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKrB,eAAL;AACD;;AAEDmB,EAAAA,cAAc,CAACG,EAAD,EAAK,CAClB;;AAoBD;AACAC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAG,QAAA,IAAI,EAAC,oBAAR;AAAA,+BACE;AAAK,UAAA,GAAG,EAAC,YAAT;AAAsB,UAAA,KAAK,EAAC,OAA5B;AAAoC,UAAA,GAAG,EAAC;AAAxC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,EAIG,KAAKL,KAAL,CAAWT,QAAX,CAAoBe,GAApB,CAAwB,CAACC,OAAD,EAAUC,CAAV,KAAgB;AACrC,4BACQ,QAAC,eAAD;AAAiB,UAAA,QAAQ,EAAE,KAAKR,KAAL,CAAWD,QAAtC;AAAgD,UAAA,EAAE,EAAES,CAApD;AAAuD,UAAA,MAAM,EAAED,OAAO,CAAC,CAAD,CAAtE;AAA2E,UAAA,OAAO,EAAEA,OAAO,CAAC,CAAD,CAA3F;AAAgG,UAAA,IAAI,EAAEA,OAAO,CAAC,CAAD;AAA7G;AAAA;AAAA;AAAA;AAAA,gBADR;AAGH,OAJA,CAJH,eASE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cATF;AAAA,oBADF;AAaD;;AAjDwC;;AAoD7C,eAAe7B,cAAf","sourcesContent":["import React from 'react'\nimport Logout from './Logout';\nimport MessagesDisplay from './MessagesDisplay';\nimport UserContext from './UserContext';\n\n\nclass InConversation extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = ({ messages: [],\n                     username: '',\n                    }\n      );\n      this.handleRegister = this.handleRegister.bind(this)\n    }\n    componentDidMount() {\n      this.getConversation();\n    }\n\n    handleRegister(ev) {\n    }\n\n    getConversation = () => {\n        fetch('http://localhost:5000/conversation/' + this.props.match.params.id)\n        .then(response => {\n          return response.text()\n        })\n        .then(data => {\n          const messages = JSON.parse(data)\n          console.log(messages)\n          if (messages.includes(\"user not in this\")) {\n              alert(\"You are not part of this conversation\")\n          }\n          else {\n            this.setState({messages: messages[0],\n                           username: messages[1]})\n          }\n        })\n        }\n  \n    // Rendu React du composant  \n    render() {\n      return (\n        <>\n          <a href=\"/conversation-list\">\n            <img src=\"/logo2.png\" width=\"100px\" alt=\"logo-provisoire\"/>\n          </a>\n          {this.state.messages.map((message, i) => {\n              return (\n                      <MessagesDisplay username={this.state.username} id={i} author={message[0]} content={message[1]} sent={message[2]}/>\n              )\n          })}\n          <Logout />\n        </>\n      );\n    }\n  }\n\nexport default InConversation"]},"metadata":{},"sourceType":"module"}