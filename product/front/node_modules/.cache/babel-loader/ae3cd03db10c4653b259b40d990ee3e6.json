{"ast":null,"code":"var _jsxFileName = \"/home/techmanager/Documents/tkiener-blablapp-react/product/front/src/InConversation.jsx\";\nimport React from 'react';\nimport Logout from './Logout';\nimport MessagesDisplay from './MessagesDisplay';\nimport UserContext from './UserContext';\nimport Header from './Header';\nimport './InConversation.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass InConversation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getConversation = () => {\n      fetch('http://localhost:5000/conversation/' + this.props.match.params.id).then(response => {\n        return response.text();\n      }).then(data => {\n        const messages = JSON.parse(data);\n        console.log(messages);\n\n        if (messages.includes(\"user not in this\")) {\n          alert(\"You are not part of this conversation\");\n        } else {\n          this.setState({\n            messages: messages[0],\n            username: messages[1],\n            participants: messages[2]\n          });\n        }\n      });\n    };\n\n    this.state = {\n      messages: [],\n      username: '',\n      participants: []\n    };\n    this.handleRegister = this.handleRegister.bind(this);\n  }\n\n  componentDidMount() {\n    this.getConversation();\n  }\n\n  handleRegister(ev) {}\n\n  // Rendu React du composant  \n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"flex-aside\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"side-bar\",\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Participants: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 39\n          }, this), this.state.participants.map((member, i) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"members\",\n              id: i,\n              children: member\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 25\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"background\",\n          children: this.state.messages.map((message, i) => {\n            return /*#__PURE__*/_jsxDEV(MessagesDisplay, {\n              username: this.state.username,\n              id: i,\n              author: message[0],\n              content: message[1],\n              sent: message[2]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 25\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default InConversation;","map":{"version":3,"sources":["/home/techmanager/Documents/tkiener-blablapp-react/product/front/src/InConversation.jsx"],"names":["React","Logout","MessagesDisplay","UserContext","Header","InConversation","Component","constructor","props","getConversation","fetch","match","params","id","then","response","text","data","messages","JSON","parse","console","log","includes","alert","setState","username","participants","state","handleRegister","bind","componentDidMount","ev","render","map","member","i","message"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Logout from './Logout';\nimport MessagesDisplay from './MessagesDisplay';\nimport UserContext from './UserContext';\nimport Header from './Header'\nimport './InConversation.css'\n\n\nclass InConversation extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = ({ messages: [],\n                     username: '',\n                     participants: [],\n                    }\n      );\n      this.handleRegister = this.handleRegister.bind(this)\n    }\n    componentDidMount() {\n      this.getConversation();\n    }\n\n    handleRegister(ev) {\n    }\n\n    getConversation = () => {\n        fetch('http://localhost:5000/conversation/' + this.props.match.params.id)\n        .then(response => {\n          return response.text()\n        })\n        .then(data => {\n          const messages = JSON.parse(data)\n          console.log(messages)\n          if (messages.includes(\"user not in this\")) {\n              alert(\"You are not part of this conversation\")\n          }\n          else {\n            this.setState({messages: messages[0],\n                           username: messages[1],\n                           participants: messages[2]})\n          }\n        })\n        }\n  \n    // Rendu React du composant  \n    render() {\n      return (\n        <>\n           <Header />\n          <div id=\"flex-aside\">\n            <div className=\"side-bar\"><b>Participants: </b>\n                {this.state.participants.map((member, i) => {\n                    return (\n                        <div className=\"members\" id={i}>{member}</div>\n                    )\n                })}\n            </div>\n            <div className=\"background\">\n            {this.state.messages.map((message, i) => {\n                return (\n                        <MessagesDisplay username={this.state.username} id={i} author={message[0]} content={message[1]} sent={message[2]}/>\n                )\n            })}\n            </div>\n        </div>\n        </>\n      );\n    }\n  }\n\nexport default InConversation"]},"metadata":{},"sourceType":"module"}