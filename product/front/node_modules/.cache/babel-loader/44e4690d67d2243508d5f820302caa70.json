{"ast":null,"code":"var _jsxFileName = \"/home/techmanager/Documents/tkiener-blablapp-react/product/front/src/CreateConversation.jsx\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport Header from './Header';\nimport './CreateConversation.css';\nimport ContactsSelect from './ContactsSelect';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass CreateConversation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleAddContact = childData => {\n      let L = this.state.selected_contacts;\n      L.push(childData);\n      this.setState({\n        selected_contacts: L\n      });\n      let string = this.addAdressSpace();\n      this.setState({\n        selected_contacts_string: string\n      });\n    };\n\n    this.handleRemoveContact = childData => {\n      let L = this.state.selected_contacts;\n\n      if (L.includes(childData)) {\n        let filter = L.filter(email => email !== childData);\n        this.setState({\n          selected_contacts: filter,\n          selected_contacts_string: String(filter).split(',').join(', ')\n        });\n      }\n    };\n\n    this.addAdressSpace = () => {\n      let L = [];\n      let input = this.state.selected_contacts;\n      let string = new String(input);\n      let formed_string = string.split(',').join(', ');\n      console.log(formed_string);\n      return formed_string;\n    };\n\n    this.getContacts = () => {\n      fetch('http://localhost:5000/conversation-list').then(response => {\n        return response.json();\n      }).then(convers_list => {\n        console.log('UserHome/getConversations/convers_list', convers_list); // Sauvegarde de l'état du composant avec le résultat de la réponse parsée de la DB\n\n        this.setState({\n          contacts: convers_list.contacts\n        });\n      }, error => {\n        this.setState({\n          error\n        });\n      });\n    };\n\n    this.state = {\n      contacts: [],\n      selected_contacts: [],\n      selected_contacts_string: ''\n    };\n    this.createConversation = this.createConversation.bind(this);\n  }\n\n  componentDidMount() {\n    this.getContacts();\n  }\n\n  createConversation(ev) {\n    ev.preventDefault();\n    const data = new FormData();\n    data.append('email', this.emails.value);\n    data.append('name', this.name.value);\n    fetch('http://localhost:5000/create_conversation', {\n      method: 'POST',\n      body: data\n    }).then(response => {\n      return response.text();\n    }).then(data => {\n      let created_conv = data;\n      console.log(created_conv);\n      console.log(typeof created_conv);\n\n      if (created_conv.includes('conversation_id')) {\n        this.props.history.push('/conversation-list');\n      } else {\n        alert('Adresse(s) email non reconnues');\n      } // window.location.reload(false);\n\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"flex-aside\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"side-bar\",\n          children: /*#__PURE__*/_jsxDEV(\"section\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Contacts:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this), this.state.contacts.map(member => {\n              return /*#__PURE__*/_jsxDEV(ContactsSelect, {\n                contacts: member,\n                parentCallbackAdd: this.handleAddContact,\n                parentCallbackRemove: this.handleRemoveContact\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 23\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"create-contact-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"http://localhost:3000/create-contact\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  id: \"create-contact\",\n                  src: \"/convers-icon.png\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 66\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"create-contact-msg\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.createConversation,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-style\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                for: \"\",\n                children: \"Emails des participants: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"emails\",\n                class: \"input\",\n                type: \"text\",\n                ref: ref => {\n                  this.emails = ref;\n                },\n                required: true,\n                value: this.state.selected_contacts_string\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"emails-syntaxe-requirement\",\n                children: \"Si plusieurs adresses, les s\\xE9parer par des virgule espace: julien@blabla.fr, laura@blabla.fr, ...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-style\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                for: \"\",\n                children: \"Nom de la conversation: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                ref: ref => {\n                  this.name = ref;\n                },\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"Cr\\xE9er conversation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default _c = withRouter(CreateConversation);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/home/techmanager/Documents/tkiener-blablapp-react/product/front/src/CreateConversation.jsx"],"names":["React","withRouter","Header","ContactsSelect","CreateConversation","Component","constructor","props","handleAddContact","childData","L","state","selected_contacts","push","setState","string","addAdressSpace","selected_contacts_string","handleRemoveContact","includes","filter","email","String","split","join","input","formed_string","console","log","getContacts","fetch","then","response","json","convers_list","contacts","error","createConversation","bind","componentDidMount","ev","preventDefault","data","FormData","append","emails","value","name","method","body","text","created_conv","history","alert","render","map","member","ref"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {withRouter} from 'react-router-dom';\nimport Header from './Header';\nimport './CreateConversation.css'\nimport ContactsSelect from './ContactsSelect';\n\nclass CreateConversation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contacts: [],\n      selected_contacts: [],\n      selected_contacts_string: '',\n    }\n\n    this.createConversation = this.createConversation.bind(this);\n  }\n\n  handleAddContact = (childData) =>{\n    let L = this.state.selected_contacts\n    L.push(childData)\n    this.setState({selected_contacts: L})\n    let string = this.addAdressSpace()\n    this.setState({selected_contacts_string: string})\n}\n\n  handleRemoveContact = (childData) =>{\n    let L = this.state.selected_contacts\n    if (L.includes(childData)) {\n      let filter = L.filter(email => email !== childData)\n      this.setState({selected_contacts: filter, selected_contacts_string: String(filter).split(',').join(', ')})\n    }\n  }\n\n  addAdressSpace = () => {\n    let L = []\n    let input = this.state.selected_contacts\n      let string = new String(input)\n      let formed_string = string.split(',').join(', ')\n      console.log(formed_string)\n      return formed_string\n  }\n\n\n  componentDidMount() {\n    this.getContacts()\n  }\n\n  createConversation(ev) {\n    ev.preventDefault();\n  \n    const data = new FormData();\n    data.append('email', this.emails.value);\n    data.append('name', this.name.value);\n\n    fetch('http://localhost:5000/create_conversation', {\n    method: 'POST',\n    body: data,\n  })\n  .then((response) => {\n    return response.text();\n  })\n  .then((data) => {\n    let created_conv = data\n    console.log(created_conv)\n    console.log(typeof created_conv)\n    if (created_conv.includes('conversation_id')) {\n      this.props.history.push('/conversation-list')\n    }\n    else {\n      alert('Adresse(s) email non reconnues')\n    }\n    // window.location.reload(false);\n  });\n  }\n\n  getContacts = () => {\n    fetch('http://localhost:5000/conversation-list')\n    .then(response => {\n      return(\n        response.json()\n    )})\n    .then(convers_list => {\n      console.log('UserHome/getConversations/convers_list', convers_list)\n      // Sauvegarde de l'état du composant avec le résultat de la réponse parsée de la DB\n      this.setState({\n        contacts : convers_list.contacts\n      });\n          }, (error) => {\n            this.setState({\n              error\n            });\n          }\n      )\n  };\n\n\n\n  render() {\n    \n      return (\n      <> \n      <Header />\n      <div id=\"flex-aside\">\n            <div className=\"side-bar\">\n              <section>\n                <div>Contacts:</div>             \n                  {this.state.contacts.map((member) => {\n                    return (\n                      <ContactsSelect contacts={member} parentCallbackAdd={this.handleAddContact} parentCallbackRemove={this.handleRemoveContact}/>\n                    )\n                  })}\n                <div id=\"create-contact-container\">\n                  <a href='http://localhost:3000/create-contact'><img id=\"create-contact\" src=\"/convers-icon.png\"/></a>\n                  <div id=\"create-contact-msg\"></div>\n                </div> \n              </section>                         \n            </div> \n        <form onSubmit={this.createConversation}>\n          <div className=\"flex\">\n              <div className=\"input-style\">\n                <label for=\"\">Emails des participants: </label>\n                <input id=\"emails\" class=\"input\" type=\"text\" ref={(ref) => { this.emails = ref; }} required value={this.state.selected_contacts_string}/>\n                <div id=\"emails-syntaxe-requirement\">Si plusieurs adresses, les séparer par des virgule espace: julien@blabla.fr, laura@blabla.fr, ...</div>\n              </div>\n              <div className=\"input-style\">\n                <label for=\"\">Nom de la conversation: </label>\n                <input type=\"text\" ref={(ref) => { this.name = ref; }} required></input>\n              </div>\n          </div>\n          <div>\n          <button>Créer conversation</button>\n          </div>\n        </form>\n        </div>\n      </>\n      );\n  }\n}\n\nexport default withRouter(CreateConversation);"]},"metadata":{},"sourceType":"module"}