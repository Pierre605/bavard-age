{"ast":null,"code":"var _jsxFileName = \"/Users/tekyteka/Documents/tkiener-blablapp-react/blablapp-front/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { AppBar, Toolbar, Typography, Button, IconButton } from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\"; // Composant de classe App, principal de l'App React BLAblaPp\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // Etat du composant\n\n    this.getDBData = () => {\n      fetch(\"http://127.0.0.1:5000/\").then(response => response.json()).then(result => {\n        console.log('App/getDBData', result); // Sauvegarde de l'état du composant avec le résultat de la réponse parsée de la DB\n\n        this.setState({\n          data: result.data // listes des données de la DB \n\n        });\n      }, error => {\n        this.setState({\n          error\n        });\n      });\n    };\n\n    this.state = {\n      data: [] // listes des données de la DB \n\n    };\n  } // Fonction qui récupère les données de la DB\n\n\n  // Le composant a été chargé\n  componentDidMount() {\n    // Les photos sont récupérées\n    this.getDBData();\n  } // Le composant a été mis à jour\n\n\n  componentDidUpdate() {} // Rendu React du composant avec un Router et un switch\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst Home = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Back-end root road\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"homeButton\",\n        src: \"./img/logo.png\",\n        alt: \"Root Road\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n};\n\n_c = Home;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/tekyteka/Documents/tkiener-blablapp-react/blablapp-front/src/App.js"],"names":["React","BrowserRouter","Router","Switch","Route","Link","AppBar","Toolbar","Typography","Button","IconButton","MenuIcon","App","Component","constructor","props","getDBData","fetch","then","response","json","result","console","log","setState","data","error","state","componentDidMount","componentDidUpdate","render","Home"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAGEC,KAHF,EAIEC,IAJF,QAKO,kBALP;AAMA,SACEC,MADF,EAEEC,OAFF,EAGEC,UAHF,EAIEC,MAJF,EAKEC,UALF,QAMO,mBANP;AAOA,OAAOC,QAAP,MAAqB,yBAArB,C,CAGA;;;;;AACA,MAAMC,GAAN,SAAkBZ,KAAK,CAACa,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAEjB;;AAFiB,SASnBC,SATmB,GASP,MAAM;AAChBC,MAAAA,KAAK,CAAC,wBAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,MAA7B,EADU,CAEV;;AACA,aAAKG,QAAL,CAAc;AACZC,UAAAA,IAAI,EAAEJ,MAAM,CAACI,IADD,CACM;;AADN,SAAd;AAGC,OATP,EASUC,KAAD,IAAW;AACZ,aAAKF,QAAL,CAAc;AACZE,UAAAA;AADY,SAAd;AAGD,OAbP;AAeD,KAzBkB;;AAGjB,SAAKC,KAAL,GAAc;AACXF,MAAAA,IAAI,EAAE,EADK,CACF;;AADE,KAAd;AAGD,GAP+B,CAShC;;;AAmBA;AACAG,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKZ,SAAL;AACD,GAhC+B,CAkChC;;;AACAa,EAAAA,kBAAkB,GAAG,CACpB,CApC+B,CAsChC;;;AACAC,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,MAAD;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,+BACA;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,EAAE,EAAC,GAAT;AAAA,mCACE,QAAC,UAAD;AAAY,cAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AAnD+B;;AAuDhC,MAAMC,IAAI,GAAG,MAAM;AACjB,sBACI;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,GAAT;AAAA,8BACA,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEE;AAAK,QAAA,SAAS,EAAC,YAAf;AAA4B,QAAA,GAAG,EAAC,gBAAhC;AACE,QAAA,GAAG,EAAC;AADN;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADJ;AASD,CAVD;;KAAMA,I;AAaR,eAAenB,GAAf","sourcesContent":["import React from 'react'\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { \n  AppBar,\n  Toolbar,\n  Typography,\n  Button,\n  IconButton\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\n\n// Composant de classe App, principal de l'App React BLAblaPp\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    // Etat du composant\n    this.state = ({\n       data: [] // listes des données de la DB \n    })\n  }\n\n  // Fonction qui récupère les données de la DB\n  getDBData = () => {\n    fetch(\"http://127.0.0.1:5000/\")\n      .then(response => response.json())\n      .then(\n        (result) => {\n          console.log('App/getDBData', result)\n          // Sauvegarde de l'état du composant avec le résultat de la réponse parsée de la DB\n          this.setState({\n            data: result.data // listes des données de la DB \n            });\n          }, (error) => {\n            this.setState({\n              error\n            });\n          }\n      )\n  };\n\n  // Le composant a été chargé\n  componentDidMount() {\n    // Les photos sont récupérées\n    this.getDBData();\n  }\n\n  // Le composant a été mis à jour\n  componentDidUpdate() {\n  }\n\n  // Rendu React du composant avec un Router et un switch\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n        <div className=\"nav\">\n          <Link to=\"/\">\n            <Typography variant=\"h6\">Home</Typography>\n          </Link>  \n        </div>\n      </div>\n    </Router>\n    );\n  }              \n\n}\n\n  const Home = () => {\n    return(\n        <>\n          <Link to=\"/\">\n          <Typography variant=\"h6\">Back-end root road</Typography>\n            <img className=\"homeButton\" src=\"./img/logo.png\" \n              alt=\"Root Road\"></img>\n          </Link>\n        </>\n      );\n  };\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}