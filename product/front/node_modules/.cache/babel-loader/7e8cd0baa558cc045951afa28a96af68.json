{"ast":null,"code":"var _jsxFileName = \"/Users/tekyteka/Documents/tkiener-blablapp-react/product/front/src/Chat.jsx\";\nimport React from 'react';\nimport './Chat.css';\nimport { Redirect } from 'react-router';\nimport { withRouter } from 'react-router-dom';\nimport io from 'socket.io-client/dist/socket.io';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000/chat');\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props); // Etat du composant\n\n    this.state = {\n      // conversation: {'user_id' : 2, 'conversation_id' : 2},  // dico des infos de la conversation cliquée\n      messages: [] // liste des messages de la conversation cliquée\n\n    };\n    this.handleRegister = this.handleRegister.bind(this);\n  } // fonction qui récupère les informations de la DB des messages de la conversation cliquée (qui matche avec l'id demandé)\n\n\n  getMessages() {\n    fetch(\"http://127.0.0.1:5000/conversation/\" + this.props.match.params.id).then(response => response.json()).then(result => {\n      console.log('App/Chat/getMessages', result, result[1], result[0][1]); // Sauvegarde de l'état du composant avec le résultat de la réponse parsée de la DB\n\n      this.setState({\n        conversation: {\n          'conversation_id': this.props.match.params.id\n        },\n        messages: result\n      });\n    }, error => {\n      this.setState({\n        error\n      });\n    });\n  }\n\n  // Le composant a été chargé\n  componentDidMount() {\n    this.getMessages(this.props.match.params.id);\n  } // Le composant a été mis à jour\n\n\n  componentDidUpdate() {}\n\n  handleRegister(ev) {\n    // socket.on( 'connection', (client) => {  // envoie un message à la fonction FLASK  \n    //   client.on('subscribeToChat', function() {\n    //     console.log('client is subscribing to chat');\n    //     socket.emit( 'sentMessage', {\n    //       data: 'connectedUser'}  // renvoie la connexion d'un utilisateur\n    //       // var form = $( 'form' ).on( 'submit', function( e ) { // empêcher l'envoi du formulaire afin de récupérer la valeur des champs\n    //       //socket.on( 'submit', function( e ) { // empêcher l'envoi du formulaire afin de récupérer la valeur des champs\n    //         e.preventDefault()\n    //         let message = $( 'input.message' ).val()\n    //         if (message != ''){\n    //             socket.emit( 'message sent', {\n    //                 username : username,\n    //                 message : message,\n    //                 chatroom : chatroom\n    //                 } )}\n    //         $( 'input.message' ).val( '' )\n    //       })    \n    //   })\n    // }\n    ev.preventDefault();\n    console.log('Chat-handleRegister');\n    const data = new FormData();\n    data.append('username', this.username.value);\n    data.append('message', this.message.value);\n    console.log('data', data);\n    socket.emit('message sent', {\n      username: data.username,\n      message: data.message,\n      chatroom: this.state.conversation\n    }); // $( 'input.message' ).val( '' )\n    // socket.on( 'my response', function( msg ) {\n    //   // envoyer un message à toutes les sessions actives\n    //   console.log( msg )\n    //   // if( typeof msg.username !== 'undefined' ) {\n    //     // $( 'h3' ).remove()\n    //     // la ligne ci-dessous est à adapter selon l'affichage de vos messages\n    //     // $( 'div.message_holder' ).append( \n    //     //   '<div class=\"message\"><b style=\"color:#000\">'+msg.username+'</b> '+msg.message+'</div>'\n    //     //   )}\n    //   fetch('http://localhost:5000/chat', {\n    //     method: 'POST',\n    //     body: data,\n    //   })\n    //   .then((response) => {\n    //     console.log(response.text());\n    //     {this.props.close()};\n    //     return response.text()\n    //   })\n    //   .then((data) => {\n    //     console.log(data)\n    //     if (data.includes('true')) {\n    //       this.props.history.push('/conversations')\n    //     }\n    //     else {\n    //       alert('Registration failed')\n    //     }\n    //   // window.location.reload(false);\n    // })\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"simple-modal-title\",\n        children: \"CHATROOM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [this.state.conversation.conversation_id, this.state.conversation.user_id, /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: this.state.messages.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Message: \", item[1], \"Posted by: \", item[0], \" on: \", item[2]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleRegister,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box\",\n          id: this.props.match.params.id,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"\",\n            children: \"Votre nom: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"username\",\n            class: \"input\",\n            type: \"text\",\n            ref: ref => {\n              this.username = ref;\n            },\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"\",\n            children: \"Message: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            ref: ref => {\n              this.message = ref;\n            },\n            type: \"text\",\n            name: \"\",\n            id: \"\",\n            cols: \"30\",\n            rows: \"10\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Envoyer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/tekyteka/Documents/tkiener-blablapp-react/product/front/src/Chat.jsx"],"names":["React","Redirect","withRouter","io","socket","Chat","Component","constructor","props","state","messages","handleRegister","bind","getMessages","fetch","match","params","id","then","response","json","result","console","log","setState","conversation","error","componentDidMount","componentDidUpdate","ev","preventDefault","data","FormData","append","username","value","message","emit","chatroom","render","conversation_id","user_id","map","item","ref"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Chat.css';\nimport { Redirect } from 'react-router';\nimport { withRouter } from 'react-router-dom';\nimport io from 'socket.io-client/dist/socket.io';\nconst socket = io('http://localhost:5000/chat');\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props);\n    // Etat du composant\n    this.state = ({ \n      // conversation: {'user_id' : 2, 'conversation_id' : 2},  // dico des infos de la conversation cliquée\n      messages: []  // liste des messages de la conversation cliquée\n    })\n    this.handleRegister = this.handleRegister.bind(this);\n  }\n\n// fonction qui récupère les informations de la DB des messages de la conversation cliquée (qui matche avec l'id demandé)\n  getMessages() {\n    fetch(\"http://127.0.0.1:5000/conversation/\" + this.props.match.params.id)\n      .then(response => response.json())\n      .then(\n        (result) => {\n          console.log('App/Chat/getMessages', result, result[1], result[0][1])\n          // Sauvegarde de l'état du composant avec le résultat de la réponse parsée de la DB\n          this.setState({\n            conversation : {'conversation_id' : this.props.match.params.id},\n            messages: result\n          });\n          }, (error) => {\n            this.setState({\n              error\n            });\n          }\n        )\n  };\n\n  // Le composant a été chargé\n  componentDidMount() {\n    this.getMessages(this.props.match.params.id)\n  }\n\n  // Le composant a été mis à jour\n  componentDidUpdate() {\n  }\n  \n  handleRegister(ev) {\n    // socket.on( 'connection', (client) => {  // envoie un message à la fonction FLASK  \n    //   client.on('subscribeToChat', function() {\n    //     console.log('client is subscribing to chat');\n    //     socket.emit( 'sentMessage', {\n    //       data: 'connectedUser'}  // renvoie la connexion d'un utilisateur\n    //       // var form = $( 'form' ).on( 'submit', function( e ) { // empêcher l'envoi du formulaire afin de récupérer la valeur des champs\n    //       //socket.on( 'submit', function( e ) { // empêcher l'envoi du formulaire afin de récupérer la valeur des champs\n    //         e.preventDefault()\n    //         let message = $( 'input.message' ).val()\n    //         if (message != ''){\n    //             socket.emit( 'message sent', {\n    //                 username : username,\n    //                 message : message,\n    //                 chatroom : chatroom\n    //                 } )}\n    //         $( 'input.message' ).val( '' )\n    //       })    \n    //   })\n    // }\n\n      ev.preventDefault();\n      console.log('Chat-handleRegister')\n    \n      const data = new FormData();\n      data.append('username', this.username.value);\n      data.append('message', this.message.value);\n      console.log('data', data);\n      socket.emit( 'message sent', {\n        username : data.username,\n        message : data.message,\n        chatroom : this.state.conversation\n      });\n      // $( 'input.message' ).val( '' )\n    \n    \n    // socket.on( 'my response', function( msg ) {\n    //   // envoyer un message à toutes les sessions actives\n    //   console.log( msg )\n    //   // if( typeof msg.username !== 'undefined' ) {\n    //     // $( 'h3' ).remove()\n    //     // la ligne ci-dessous est à adapter selon l'affichage de vos messages\n    //     // $( 'div.message_holder' ).append( \n    //     //   '<div class=\"message\"><b style=\"color:#000\">'+msg.username+'</b> '+msg.message+'</div>'\n    //     //   )}\n\n    //   fetch('http://localhost:5000/chat', {\n    //     method: 'POST',\n    //     body: data,\n    //   })\n    //   .then((response) => {\n    //     console.log(response.text());\n    //     {this.props.close()};\n    //     return response.text()\n    //   })\n    //   .then((data) => {\n    //     console.log(data)\n    //     if (data.includes('true')) {\n    //       this.props.history.push('/conversations')\n    //     }\n    //     else {\n    //       alert('Registration failed')\n    //     }\n    //   // window.location.reload(false);\n    // })\n  }\n\n  render() {\n    \n      return (\n      <> \n        <h1 id=\"simple-modal-title\">CHATROOM</h1>\n        <div className=\"messages\"> \n           {this.state.conversation.conversation_id}\n           {this.state.conversation.user_id}\n          <ul>  \n            {this.state.messages.map(item => (\n                <li>\n                  Message: {item[1]}\n                  Posted by: {item[0]} on: {item[2]}\n                </li>    \n                ))}             \n          </ul> \n        </div>       \n        <form onSubmit={this.handleRegister}>\n          <div className=\"box\" id={this.props.match.params.id}>\n            <label for=\"\">Votre nom: </label>\n            <input id=\"username\" class=\"input\" type=\"text\" ref={(ref) => { this.username = ref; }} required />\n            <label for=\"\">Message: </label>\n            <input ref={(ref) => { this.message = ref; }} type=\"text\"name=\"\" id=\"\" cols=\"30\" rows=\"10\" required/>\n          </div>\n          <div className=\"button\">\n          <button>Envoyer</button>\n          </div>\n        </form>\n      </>\n      );\n    }\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}